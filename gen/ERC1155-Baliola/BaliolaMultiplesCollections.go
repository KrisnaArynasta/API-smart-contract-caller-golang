// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BaliolaMultiplesCollections

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BaliolaMultiplesCollectionsMetaData contains all meta data concerning the BaliolaMultiplesCollections contract.
var BaliolaMultiplesCollectionsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MintedId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"countOfNFTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620058183803806200581883398181016040528101906200003791906200044f565b6040518060200160405280600081525062000058816200013860201b60201c565b506000600460006101000a81548160ff021916908315150217905550620000896000801b336200014d60201b60201c565b620000bb7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c336200014d60201b60201c565b620000ed7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200014d60201b60201c565b6200011f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200014d60201b60201c565b8060099081620001309190620006eb565b5050620007d2565b8060029081620001499190620006eb565b5050565b6200015f82826200023f60201b60201c565b6200023b5760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001e0620002aa60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031b82620002d0565b810181811067ffffffffffffffff821117156200033d576200033c620002e1565b5b80604052505050565b600062000352620002b2565b905062000360828262000310565b919050565b600067ffffffffffffffff821115620003835762000382620002e1565b5b6200038e82620002d0565b9050602081019050919050565b60005b83811015620003bb5780820151818401526020810190506200039e565b83811115620003cb576000848401525b50505050565b6000620003e8620003e28462000365565b62000346565b905082815260208101848484011115620004075762000406620002cb565b5b620004148482856200039b565b509392505050565b600082601f830112620004345762000433620002c6565b5b815162000446848260208601620003d1565b91505092915050565b600060208284031215620004685762000467620002bc565b5b600082015167ffffffffffffffff811115620004895762000488620002c1565b5b62000497848285016200041c565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004f357607f821691505b602082108103620005095762000508620004ab565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005737fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000534565b6200057f868362000534565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005cc620005c6620005c08462000597565b620005a1565b62000597565b9050919050565b6000819050919050565b620005e883620005ab565b62000600620005f782620005d3565b84845462000541565b825550505050565b600090565b6200061762000608565b62000624818484620005dd565b505050565b5b818110156200064c57620006406000826200060d565b6001810190506200062a565b5050565b601f8211156200069b5762000665816200050f565b620006708462000524565b8101602085101562000680578190505b620006986200068f8562000524565b83018262000629565b50505b505050565b600082821c905092915050565b6000620006c060001984600802620006a0565b1980831691505092915050565b6000620006db8383620006ad565b9150826002028217905092915050565b620006f682620004a0565b67ffffffffffffffff811115620007125762000711620002e1565b5b6200071e8254620004da565b6200072b82828562000650565b600060209050601f8311600181146200076357600084156200074e578287015190505b6200075a8582620006cd565b865550620007ca565b601f19841662000773866200050f565b60005b828110156200079d5784890151825560018201915060208501945060208101905062000776565b86831015620007bd5784890151620007b9601f891682620006ad565b8355505b6001600288020188555050505b505050505050565b61503680620007e26000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80635c975abb11610104578063a22cb465116100a2578063e63ab1e911610071578063e63ab1e91461052b578063e985e9c514610549578063f242432a14610579578063f5298aca14610595576101ce565b8063a22cb465146104a5578063bd85b039146104c1578063d5391393146104f1578063d547741f1461050f576101ce565b80638456cb59116100de5780638456cb591461043157806391d148541461043b57806394d008ef1461046b578063a217fddf14610487576101ce565b80635c975abb146103d95780636b20c454146103f75780637f34571014610413576101ce565b80632eb2c2d6116101715780633f4ba83a1161014b5780633f4ba83a146103515780634e1273f41461035b5780634f558e791461038b57806356189236146103bb576101ce565b80632eb2c2d6146102fd5780632f2ff15d1461031957806336568abe14610335576101ce565b806306fdde03116101ad57806306fdde031461024f5780630e89341c1461026d578063248a9ca31461029d5780632da0504f146102cd576101ce565b8062fdd58e146101d357806301ffc9a71461020357806302fe530514610233575b600080fd5b6101ed60048036038101906101e891906130aa565b6105b1565b6040516101fa91906130f9565b60405180910390f35b61021d6004803603810190610218919061316c565b610679565b60405161022a91906131b4565b60405180910390f35b61024d60048036038101906102489190613315565b61068b565b005b6102576106ca565b60405161026491906133e6565b60405180910390f35b61028760048036038101906102829190613408565b610758565b60405161029491906133e6565b60405180910390f35b6102b760048036038101906102b2919061346b565b61078c565b6040516102c491906134a7565b60405180910390f35b6102e760048036038101906102e2919061362b565b6107ac565b6040516102f49190613788565b60405180910390f35b610317600480360381019061031291906137aa565b61092d565b005b610333600480360381019061032e9190613879565b6109ce565b005b61034f600480360381019061034a9190613879565b6109f7565b005b610359610a7a565b005b6103756004803603810190610370919061397c565b610ab7565b6040516103829190613788565b60405180910390f35b6103a560048036038101906103a09190613408565b610bd0565b6040516103b291906131b4565b60405180910390f35b6103c3610be4565b6040516103d091906130f9565b60405180910390f35b6103e1610bf5565b6040516103ee91906131b4565b60405180910390f35b610411600480360381019061040c91906139f4565b610c0c565b005b61041b610ca9565b60405161042891906134a7565b60405180910390f35b610439610ccd565b005b61045560048036038101906104509190613879565b610d0a565b60405161046291906131b4565b60405180910390f35b61048560048036038101906104809190613a7f565b610d75565b005b61048f610e98565b60405161049c91906134a7565b60405180910390f35b6104bf60048036038101906104ba9190613b1a565b610e9f565b005b6104db60048036038101906104d69190613408565b610eb5565b6040516104e891906130f9565b60405180910390f35b6104f9610ed2565b60405161050691906134a7565b60405180910390f35b61052960048036038101906105249190613879565b610ef6565b005b610533610f1f565b60405161054091906134a7565b60405180910390f35b610563600480360381019061055e9190613b5a565b610f43565b60405161057091906131b4565b60405180910390f35b610593600480360381019061058e9190613b9a565b610fd7565b005b6105af60048036038101906105aa9190613c31565b611078565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613cf6565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061068482611115565b9050919050565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c6106bd816106b861118f565b611197565b6106c682611234565b5050565b600980546106d790613d45565b80601f016020809104026020016040519081016040528092919081815260200182805461070390613d45565b80156107505780601f1061072557610100808354040283529160200191610750565b820191906000526020600020905b81548152906001019060200180831161073357829003601f168201915b505050505081565b6060600261076583611247565b604051602001610776929190613e96565b6040516020818303038152906040529050919050565b600060036000838152602001908152602001600020600101549050919050565b60606107df7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66107da61118f565b610d0a565b61081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590613f11565b60405180910390fd5b60008467ffffffffffffffff81111561083a576108396131ea565b5b6040519080825280602002602001820160405280156108685781602001602082028036833780820191505090505b50905060005b8581101561091457600061088260066113a7565b905061088e60066113b5565b808383815181106108a2576108a1613f31565b5b602002602001018181525050876007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050808061090c90613f8f565b91505061086e565b50610921868286866113cb565b80915050949350505050565b61093561118f565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061097b575061097a8561097561118f565b610f43565b5b6109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190614049565b60405180910390fd5b6109c785858585856115e8565b5050505050565b6109d78261078c565b6109e8816109e361118f565b611197565b6109f283836118fb565b505050565b6109ff61118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a63906140db565b60405180910390fd5b610a7682826119dc565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610aac81610aa761118f565b611197565b610ab4611abe565b50565b60608151835114610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af49061416d565b60405180910390fd5b6000835167ffffffffffffffff811115610b1a57610b196131ea565b5b604051908082528060200260200182016040528015610b485781602001602082028036833780820191505090505b50905060005b8451811015610bc557610b95858281518110610b6d57610b6c613f31565b5b6020026020010151858381518110610b8857610b87613f31565b5b60200260200101516105b1565b828281518110610ba857610ba7613f31565b5b60200260200101818152505080610bbe90613f8f565b9050610b4e565b508091505092915050565b600080610bdc83610eb5565b119050919050565b6000610bf060066113a7565b905090565b6000600460009054906101000a900460ff16905090565b610c1461118f565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610c5a5750610c5983610c5461118f565b610f43565b5b610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c90906141ff565b60405180910390fd5b610ca4838383611b60565b505050565b7f7804d923f43a17d325d77e781528e0793b2edd9890ab45fc64efd7b4b427744c81565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610cff81610cfa61118f565b611197565b610d07611e10565b50565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610da67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610da161118f565b610d0a565b610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90613f11565b60405180910390fd5b6000610df160066113a7565b9050610dfd60066113b5565b610e0984828585611eb3565b836007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f79a6e1720f9dc2a3b49a4efa844f8bc70e9bc606b1aedb697c09e87fc41cedac81604051610e8a91906130f9565b60405180910390a150505050565b6000801b81565b610eb1610eaa61118f565b8383612048565b5050565b600060056000838152602001908152602001600020549050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610eff8261078c565b610f1081610f0b61118f565b611197565b610f1a83836119dc565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fdf61118f565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061102557506110248561101f61118f565b610f43565b5b611064576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105b906141ff565b60405180910390fd5b61107185858585856121b4565b5050505050565b61108061118f565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806110c657506110c5836110c061118f565b610f43565b5b611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc906141ff565b60405180910390fd5b611110838383612435565b505050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611188575061118782612651565b5b9050919050565b600033905090565b6111a18282610d0a565b611230576111c68173ffffffffffffffffffffffffffffffffffffffff166014612733565b6111d48360001c6020612733565b6040516020016111e59291906142b7565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122791906133e6565b60405180910390fd5b5050565b80600290816112439190614488565b5050565b60606000820361128e576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506113a2565b600082905060005b600082146112c05780806112a990613f8f565b915050600a826112b99190614589565b9150611296565b60008167ffffffffffffffff8111156112dc576112db6131ea565b5b6040519080825280601f01601f19166020018201604052801561130e5781602001600182028036833780820191505090505b5090505b6000851461139b5760018261132791906145ba565b9150600a8561133691906145ee565b6030611342919061461f565b60f81b81838151811061135857611357613f31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856113949190614589565b9450611312565b8093505050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361143a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611431906146e7565b60405180910390fd5b815183511461147e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147590614779565b60405180910390fd5b600061148861118f565b90506114998160008787878761296f565b60005b8451811015611552578381815181106114b8576114b7613f31565b5b60200260200101516000808784815181106114d6576114d5613f31565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611538919061461f565b92505081905550808061154a90613f8f565b91505061149c565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115ca929190614799565b60405180910390a46115e1816000878787876129cd565b5050505050565b815183511461162c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162390614779565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361169b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169290614842565b60405180910390fd5b60006116a561118f565b90506116b581878787878761296f565b60005b84518110156118665760008582815181106116d6576116d5613f31565b5b6020026020010151905060008583815181106116f5576116f4613f31565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d906148d4565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461184b919061461f565b925050819055505050508061185f90613f8f565b90506116b8565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118dd929190614799565b60405180910390a46118f38187878787876129cd565b505050505050565b6119058282610d0a565b6119d85760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061197d61118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6119e68282610d0a565b15611aba5760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a5f61118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611ac6610bf5565b611b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afc90614940565b60405180910390fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b4961118f565b604051611b56919061496f565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc6906149fc565b60405180910390fd5b8051825114611c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0a90614779565b60405180910390fd5b6000611c1d61118f565b9050611c3d8185600086866040518060200160405280600081525061296f565b60005b8351811015611d8a576000848281518110611c5e57611c5d613f31565b5b602002602001015190506000848381518110611c7d57611c7c613f31565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1590614a8e565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611d8290613f8f565b915050611c40565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611e02929190614799565b60405180910390a450505050565b611e18610bf5565b15611e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4f90614afa565b60405180910390fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e9c61118f565b604051611ea9919061496f565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f19906146e7565b60405180910390fd5b6000611f2c61118f565b9050611f4d81600087611f3e88612ba4565b611f4788612ba4565b8761296f565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fac919061461f565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161202a929190614b1a565b60405180910390a461204181600087878787612c1e565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ad90614bb5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516121a791906131b4565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221a90614842565b60405180910390fd5b600061222d61118f565b905061224d81878761223e88612ba4565b61224788612ba4565b8761296f565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156122e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122db906148d4565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612399919061461f565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612416929190614b1a565b60405180910390a461242c828888888888612c1e565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249b906149fc565b60405180910390fd5b60006124ae61118f565b90506124de818560006124c087612ba4565b6124c987612ba4565b6040518060200160405280600081525061296f565b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256c90614a8e565b60405180910390fd5b82810360008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612642929190614b1a565b60405180910390a45050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061271c57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061272c575061272b82612df5565b5b9050919050565b6060600060028360026127469190614bd5565b612750919061461f565b67ffffffffffffffff811115612769576127686131ea565b5b6040519080825280601f01601f19166020018201604052801561279b5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106127d3576127d2613f31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061283757612836613f31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026128779190614bd5565b612881919061461f565b90505b6001811115612921577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106128c3576128c2613f31565b5b1a60f81b8282815181106128da576128d9613f31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061291a90614c2f565b9050612884565b5060008414612965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295c90614ca4565b60405180910390fd5b8091505092915050565b612977610bf5565b156129b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ae90614afa565b60405180910390fd5b6129c5868686868686612e5f565b505050505050565b6129ec8473ffffffffffffffffffffffffffffffffffffffff16612fd7565b15612b9c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612a32959493929190614d19565b6020604051808303816000875af1925050508015612a6e57506040513d601f19601f82011682018060405250810190612a6b9190614d96565b60015b612b1357612a7a614dd0565b806308c379a003612ad65750612a8e614df2565b80612a995750612ad8565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acd91906133e6565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0a90614ef4565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9190614f86565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115612bc357612bc26131ea565b5b604051908082528060200260200182016040528015612bf15781602001602082028036833780820191505090505b5090508281600081518110612c0957612c08613f31565b5b60200260200101818152505080915050919050565b612c3d8473ffffffffffffffffffffffffffffffffffffffff16612fd7565b15612ded578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612c83959493929190614fa6565b6020604051808303816000875af1925050508015612cbf57506040513d601f19601f82011682018060405250810190612cbc9190614d96565b60015b612d6457612ccb614dd0565b806308c379a003612d275750612cdf614df2565b80612cea5750612d29565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1e91906133e6565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5b90614ef4565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de290614f86565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612e6d868686868686612ffa565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f1e5760005b8351811015612f1c57828181518110612ec057612ebf613f31565b5b602002602001015160056000868481518110612edf57612ede613f31565b5b602002602001015181526020019081526020016000206000828254612f04919061461f565b9250508190555080612f1590613f8f565b9050612ea4565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612fcf5760005b8351811015612fcd57828181518110612f7157612f70613f31565b5b602002602001015160056000868481518110612f9057612f8f613f31565b5b602002602001015181526020019081526020016000206000828254612fb591906145ba565b9250508190555080612fc690613f8f565b9050612f55565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061304182613016565b9050919050565b61305181613036565b811461305c57600080fd5b50565b60008135905061306e81613048565b92915050565b6000819050919050565b61308781613074565b811461309257600080fd5b50565b6000813590506130a48161307e565b92915050565b600080604083850312156130c1576130c061300c565b5b60006130cf8582860161305f565b92505060206130e085828601613095565b9150509250929050565b6130f381613074565b82525050565b600060208201905061310e60008301846130ea565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61314981613114565b811461315457600080fd5b50565b60008135905061316681613140565b92915050565b6000602082840312156131825761318161300c565b5b600061319084828501613157565b91505092915050565b60008115159050919050565b6131ae81613199565b82525050565b60006020820190506131c960008301846131a5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613222826131d9565b810181811067ffffffffffffffff82111715613241576132406131ea565b5b80604052505050565b6000613254613002565b90506132608282613219565b919050565b600067ffffffffffffffff8211156132805761327f6131ea565b5b613289826131d9565b9050602081019050919050565b82818337600083830152505050565b60006132b86132b384613265565b61324a565b9050828152602081018484840111156132d4576132d36131d4565b5b6132df848285613296565b509392505050565b600082601f8301126132fc576132fb6131cf565b5b813561330c8482602086016132a5565b91505092915050565b60006020828403121561332b5761332a61300c565b5b600082013567ffffffffffffffff81111561334957613348613011565b5b613355848285016132e7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561339857808201518184015260208101905061337d565b838111156133a7576000848401525b50505050565b60006133b88261335e565b6133c28185613369565b93506133d281856020860161337a565b6133db816131d9565b840191505092915050565b6000602082019050818103600083015261340081846133ad565b905092915050565b60006020828403121561341e5761341d61300c565b5b600061342c84828501613095565b91505092915050565b6000819050919050565b61344881613435565b811461345357600080fd5b50565b6000813590506134658161343f565b92915050565b6000602082840312156134815761348061300c565b5b600061348f84828501613456565b91505092915050565b6134a181613435565b82525050565b60006020820190506134bc6000830184613498565b92915050565b600067ffffffffffffffff8211156134dd576134dc6131ea565b5b602082029050602081019050919050565b600080fd5b6000613506613501846134c2565b61324a565b90508083825260208201905060208402830185811115613529576135286134ee565b5b835b81811015613552578061353e8882613095565b84526020840193505060208101905061352b565b5050509392505050565b600082601f830112613571576135706131cf565b5b81356135818482602086016134f3565b91505092915050565b600067ffffffffffffffff8211156135a5576135a46131ea565b5b6135ae826131d9565b9050602081019050919050565b60006135ce6135c98461358a565b61324a565b9050828152602081018484840111156135ea576135e96131d4565b5b6135f5848285613296565b509392505050565b600082601f830112613612576136116131cf565b5b81356136228482602086016135bb565b91505092915050565b600080600080608085870312156136455761364461300c565b5b60006136538782880161305f565b945050602061366487828801613095565b935050604085013567ffffffffffffffff81111561368557613684613011565b5b6136918782880161355c565b925050606085013567ffffffffffffffff8111156136b2576136b1613011565b5b6136be878288016135fd565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136ff81613074565b82525050565b600061371183836136f6565b60208301905092915050565b6000602082019050919050565b6000613735826136ca565b61373f81856136d5565b935061374a836136e6565b8060005b8381101561377b5781516137628882613705565b975061376d8361371d565b92505060018101905061374e565b5085935050505092915050565b600060208201905081810360008301526137a2818461372a565b905092915050565b600080600080600060a086880312156137c6576137c561300c565b5b60006137d48882890161305f565b95505060206137e58882890161305f565b945050604086013567ffffffffffffffff81111561380657613805613011565b5b6138128882890161355c565b935050606086013567ffffffffffffffff81111561383357613832613011565b5b61383f8882890161355c565b925050608086013567ffffffffffffffff8111156138605761385f613011565b5b61386c888289016135fd565b9150509295509295909350565b600080604083850312156138905761388f61300c565b5b600061389e85828601613456565b92505060206138af8582860161305f565b9150509250929050565b600067ffffffffffffffff8211156138d4576138d36131ea565b5b602082029050602081019050919050565b60006138f86138f3846138b9565b61324a565b9050808382526020820190506020840283018581111561391b5761391a6134ee565b5b835b818110156139445780613930888261305f565b84526020840193505060208101905061391d565b5050509392505050565b600082601f830112613963576139626131cf565b5b81356139738482602086016138e5565b91505092915050565b600080604083850312156139935761399261300c565b5b600083013567ffffffffffffffff8111156139b1576139b0613011565b5b6139bd8582860161394e565b925050602083013567ffffffffffffffff8111156139de576139dd613011565b5b6139ea8582860161355c565b9150509250929050565b600080600060608486031215613a0d57613a0c61300c565b5b6000613a1b8682870161305f565b935050602084013567ffffffffffffffff811115613a3c57613a3b613011565b5b613a488682870161355c565b925050604084013567ffffffffffffffff811115613a6957613a68613011565b5b613a758682870161355c565b9150509250925092565b600080600060608486031215613a9857613a9761300c565b5b6000613aa68682870161305f565b9350506020613ab786828701613095565b925050604084013567ffffffffffffffff811115613ad857613ad7613011565b5b613ae4868287016135fd565b9150509250925092565b613af781613199565b8114613b0257600080fd5b50565b600081359050613b1481613aee565b92915050565b60008060408385031215613b3157613b3061300c565b5b6000613b3f8582860161305f565b9250506020613b5085828601613b05565b9150509250929050565b60008060408385031215613b7157613b7061300c565b5b6000613b7f8582860161305f565b9250506020613b908582860161305f565b9150509250929050565b600080600080600060a08688031215613bb657613bb561300c565b5b6000613bc48882890161305f565b9550506020613bd58882890161305f565b9450506040613be688828901613095565b9350506060613bf788828901613095565b925050608086013567ffffffffffffffff811115613c1857613c17613011565b5b613c24888289016135fd565b9150509295509295909350565b600080600060608486031215613c4a57613c4961300c565b5b6000613c588682870161305f565b9350506020613c6986828701613095565b9250506040613c7a86828701613095565b9150509250925092565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000613ce0602b83613369565b9150613ceb82613c84565b604082019050919050565b60006020820190508181036000830152613d0f81613cd3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d5d57607f821691505b602082108103613d7057613d6f613d16565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154613da381613d45565b613dad8186613d76565b94506001821660008114613dc85760018114613ddd57613e10565b60ff1983168652811515820286019350613e10565b613de685613d81565b60005b83811015613e0857815481890152600182019150602081019050613de9565b838801955050505b50505092915050565b6000613e248261335e565b613e2e8185613d76565b9350613e3e81856020860161337a565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613e80600583613d76565b9150613e8b82613e4a565b600582019050919050565b6000613ea28285613d96565b9150613eae8284613e19565b9150613eb982613e73565b91508190509392505050565b7f4d7573742068617665206d696e74657220726f6c6520746f206d696e74000000600082015250565b6000613efb601d83613369565b9150613f0682613ec5565b602082019050919050565b60006020820190508181036000830152613f2a81613eee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f9a82613074565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613fcc57613fcb613f60565b5b600182019050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000614033603283613369565b915061403e82613fd7565b604082019050919050565b6000602082019050818103600083015261406281614026565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006140c5602f83613369565b91506140d082614069565b604082019050919050565b600060208201905081810360008301526140f4816140b8565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614157602983613369565b9150614162826140fb565b604082019050919050565b600060208201905081810360008301526141868161414a565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006141e9602983613369565b91506141f48261418d565b604082019050919050565b60006020820190508181036000830152614218816141dc565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000614255601783613d76565b91506142608261421f565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006142a1601183613d76565b91506142ac8261426b565b601182019050919050565b60006142c282614248565b91506142ce8285613e19565b91506142d982614294565b91506142e58284613e19565b91508190509392505050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261433e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614301565b6143488683614301565b95508019841693508086168417925050509392505050565b6000819050919050565b600061438561438061437b84613074565b614360565b613074565b9050919050565b6000819050919050565b61439f8361436a565b6143b36143ab8261438c565b84845461430e565b825550505050565b600090565b6143c86143bb565b6143d3818484614396565b505050565b5b818110156143f7576143ec6000826143c0565b6001810190506143d9565b5050565b601f82111561443c5761440d81613d81565b614416846142f1565b81016020851015614425578190505b614439614431856142f1565b8301826143d8565b50505b505050565b600082821c905092915050565b600061445f60001984600802614441565b1980831691505092915050565b6000614478838361444e565b9150826002028217905092915050565b6144918261335e565b67ffffffffffffffff8111156144aa576144a96131ea565b5b6144b48254613d45565b6144bf8282856143fb565b600060209050601f8311600181146144f257600084156144e0578287015190505b6144ea858261446c565b865550614552565b601f19841661450086613d81565b60005b8281101561452857848901518255600182019150602085019450602081019050614503565b868310156145455784890151614541601f89168261444e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061459482613074565b915061459f83613074565b9250826145af576145ae61455a565b5b828204905092915050565b60006145c582613074565b91506145d083613074565b9250828210156145e3576145e2613f60565b5b828203905092915050565b60006145f982613074565b915061460483613074565b9250826146145761461361455a565b5b828206905092915050565b600061462a82613074565b915061463583613074565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561466a57614669613f60565b5b828201905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006146d1602183613369565b91506146dc82614675565b604082019050919050565b60006020820190508181036000830152614700816146c4565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614763602883613369565b915061476e82614707565b604082019050919050565b6000602082019050818103600083015261479281614756565b9050919050565b600060408201905081810360008301526147b3818561372a565b905081810360208301526147c7818461372a565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061482c602583613369565b9150614837826147d0565b604082019050919050565b6000602082019050818103600083015261485b8161481f565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006148be602a83613369565b91506148c982614862565b604082019050919050565b600060208201905081810360008301526148ed816148b1565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061492a601483613369565b9150614935826148f4565b602082019050919050565b600060208201905081810360008301526149598161491d565b9050919050565b61496981613036565b82525050565b60006020820190506149846000830184614960565b92915050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006149e6602383613369565b91506149f18261498a565b604082019050919050565b60006020820190508181036000830152614a15816149d9565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614a78602483613369565b9150614a8382614a1c565b604082019050919050565b60006020820190508181036000830152614aa781614a6b565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614ae4601083613369565b9150614aef82614aae565b602082019050919050565b60006020820190508181036000830152614b1381614ad7565b9050919050565b6000604082019050614b2f60008301856130ea565b614b3c60208301846130ea565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614b9f602983613369565b9150614baa82614b43565b604082019050919050565b60006020820190508181036000830152614bce81614b92565b9050919050565b6000614be082613074565b9150614beb83613074565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c2457614c23613f60565b5b828202905092915050565b6000614c3a82613074565b915060008203614c4d57614c4c613f60565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614c8e602083613369565b9150614c9982614c58565b602082019050919050565b60006020820190508181036000830152614cbd81614c81565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614ceb82614cc4565b614cf58185614ccf565b9350614d0581856020860161337a565b614d0e816131d9565b840191505092915050565b600060a082019050614d2e6000830188614960565b614d3b6020830187614960565b8181036040830152614d4d818661372a565b90508181036060830152614d61818561372a565b90508181036080830152614d758184614ce0565b90509695505050505050565b600081519050614d9081613140565b92915050565b600060208284031215614dac57614dab61300c565b5b6000614dba84828501614d81565b91505092915050565b60008160e01c9050919050565b600060033d1115614def5760046000803e614dec600051614dc3565b90505b90565b600060443d10614e7f57614e04613002565b60043d036004823e80513d602482011167ffffffffffffffff82111715614e2c575050614e7f565b808201805167ffffffffffffffff811115614e4a5750505050614e7f565b80602083010160043d038501811115614e67575050505050614e7f565b614e7682602001850186613219565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614ede603483613369565b9150614ee982614e82565b604082019050919050565b60006020820190508181036000830152614f0d81614ed1565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614f70602883613369565b9150614f7b82614f14565b604082019050919050565b60006020820190508181036000830152614f9f81614f63565b9050919050565b600060a082019050614fbb6000830188614960565b614fc86020830187614960565b614fd560408301866130ea565b614fe260608301856130ea565b8181036080830152614ff48184614ce0565b9050969550505050505056fea2646970667358221220ee252356bd261caafa5e1e0ec120b8d7d915fcfccda772ac49558a38c94bb52864736f6c634300080f0033",
}

// BaliolaMultiplesCollectionsABI is the input ABI used to generate the binding from.
// Deprecated: Use BaliolaMultiplesCollectionsMetaData.ABI instead.
var BaliolaMultiplesCollectionsABI = BaliolaMultiplesCollectionsMetaData.ABI

// BaliolaMultiplesCollectionsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaliolaMultiplesCollectionsMetaData.Bin instead.
var BaliolaMultiplesCollectionsBin = BaliolaMultiplesCollectionsMetaData.Bin

// DeployBaliolaMultiplesCollections deploys a new Ethereum contract, binding an instance of BaliolaMultiplesCollections to it.
func DeployBaliolaMultiplesCollections(auth *bind.TransactOpts, backend bind.ContractBackend, _contractName string) (common.Address, *types.Transaction, *BaliolaMultiplesCollections, error) {
	parsed, err := BaliolaMultiplesCollectionsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaliolaMultiplesCollectionsBin), backend, _contractName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaliolaMultiplesCollections{BaliolaMultiplesCollectionsCaller: BaliolaMultiplesCollectionsCaller{contract: contract}, BaliolaMultiplesCollectionsTransactor: BaliolaMultiplesCollectionsTransactor{contract: contract}, BaliolaMultiplesCollectionsFilterer: BaliolaMultiplesCollectionsFilterer{contract: contract}}, nil
}

// BaliolaMultiplesCollections is an auto generated Go binding around an Ethereum contract.
type BaliolaMultiplesCollections struct {
	BaliolaMultiplesCollectionsCaller     // Read-only binding to the contract
	BaliolaMultiplesCollectionsTransactor // Write-only binding to the contract
	BaliolaMultiplesCollectionsFilterer   // Log filterer for contract events
}

// BaliolaMultiplesCollectionsCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaliolaMultiplesCollectionsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaliolaMultiplesCollectionsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaliolaMultiplesCollectionsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaliolaMultiplesCollectionsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaliolaMultiplesCollectionsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaliolaMultiplesCollectionsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaliolaMultiplesCollectionsSession struct {
	Contract     *BaliolaMultiplesCollections // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaliolaMultiplesCollectionsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaliolaMultiplesCollectionsCallerSession struct {
	Contract *BaliolaMultiplesCollectionsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// BaliolaMultiplesCollectionsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaliolaMultiplesCollectionsTransactorSession struct {
	Contract     *BaliolaMultiplesCollectionsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// BaliolaMultiplesCollectionsRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaliolaMultiplesCollectionsRaw struct {
	Contract *BaliolaMultiplesCollections // Generic contract binding to access the raw methods on
}

// BaliolaMultiplesCollectionsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaliolaMultiplesCollectionsCallerRaw struct {
	Contract *BaliolaMultiplesCollectionsCaller // Generic read-only contract binding to access the raw methods on
}

// BaliolaMultiplesCollectionsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaliolaMultiplesCollectionsTransactorRaw struct {
	Contract *BaliolaMultiplesCollectionsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaliolaMultiplesCollections creates a new instance of BaliolaMultiplesCollections, bound to a specific deployed contract.
func NewBaliolaMultiplesCollections(address common.Address, backend bind.ContractBackend) (*BaliolaMultiplesCollections, error) {
	contract, err := bindBaliolaMultiplesCollections(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollections{BaliolaMultiplesCollectionsCaller: BaliolaMultiplesCollectionsCaller{contract: contract}, BaliolaMultiplesCollectionsTransactor: BaliolaMultiplesCollectionsTransactor{contract: contract}, BaliolaMultiplesCollectionsFilterer: BaliolaMultiplesCollectionsFilterer{contract: contract}}, nil
}

// NewBaliolaMultiplesCollectionsCaller creates a new read-only instance of BaliolaMultiplesCollections, bound to a specific deployed contract.
func NewBaliolaMultiplesCollectionsCaller(address common.Address, caller bind.ContractCaller) (*BaliolaMultiplesCollectionsCaller, error) {
	contract, err := bindBaliolaMultiplesCollections(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsCaller{contract: contract}, nil
}

// NewBaliolaMultiplesCollectionsTransactor creates a new write-only instance of BaliolaMultiplesCollections, bound to a specific deployed contract.
func NewBaliolaMultiplesCollectionsTransactor(address common.Address, transactor bind.ContractTransactor) (*BaliolaMultiplesCollectionsTransactor, error) {
	contract, err := bindBaliolaMultiplesCollections(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsTransactor{contract: contract}, nil
}

// NewBaliolaMultiplesCollectionsFilterer creates a new log filterer instance of BaliolaMultiplesCollections, bound to a specific deployed contract.
func NewBaliolaMultiplesCollectionsFilterer(address common.Address, filterer bind.ContractFilterer) (*BaliolaMultiplesCollectionsFilterer, error) {
	contract, err := bindBaliolaMultiplesCollections(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsFilterer{contract: contract}, nil
}

// bindBaliolaMultiplesCollections binds a generic wrapper to an already deployed contract.
func bindBaliolaMultiplesCollections(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaliolaMultiplesCollectionsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaliolaMultiplesCollections.Contract.BaliolaMultiplesCollectionsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.BaliolaMultiplesCollectionsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.BaliolaMultiplesCollectionsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaliolaMultiplesCollections.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.DEFAULTADMINROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.DEFAULTADMINROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) MINTERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.MINTERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) MINTERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.MINTERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) PAUSERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.PAUSERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) PAUSERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.PAUSERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) URISETTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "URI_SETTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) URISETTERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.URISETTERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// URISETTERROLE is a free data retrieval call binding the contract method 0x7f345710.
//
// Solidity: function URI_SETTER_ROLE() view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) URISETTERROLE() ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.URISETTERROLE(&_BaliolaMultiplesCollections.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.BalanceOf(&_BaliolaMultiplesCollections.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.BalanceOf(&_BaliolaMultiplesCollections.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.BalanceOfBatch(&_BaliolaMultiplesCollections.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.BalanceOfBatch(&_BaliolaMultiplesCollections.CallOpts, accounts, ids)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Exists(id *big.Int) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.Exists(&_BaliolaMultiplesCollections.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) Exists(id *big.Int) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.Exists(&_BaliolaMultiplesCollections.CallOpts, id)
}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) GetCurrentTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "getCurrentTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) GetCurrentTokenId() (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.GetCurrentTokenId(&_BaliolaMultiplesCollections.CallOpts)
}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) GetCurrentTokenId() (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.GetCurrentTokenId(&_BaliolaMultiplesCollections.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.GetRoleAdmin(&_BaliolaMultiplesCollections.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BaliolaMultiplesCollections.Contract.GetRoleAdmin(&_BaliolaMultiplesCollections.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.HasRole(&_BaliolaMultiplesCollections.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.HasRole(&_BaliolaMultiplesCollections.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.IsApprovedForAll(&_BaliolaMultiplesCollections.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.IsApprovedForAll(&_BaliolaMultiplesCollections.CallOpts, account, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Name() (string, error) {
	return _BaliolaMultiplesCollections.Contract.Name(&_BaliolaMultiplesCollections.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) Name() (string, error) {
	return _BaliolaMultiplesCollections.Contract.Name(&_BaliolaMultiplesCollections.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Paused() (bool, error) {
	return _BaliolaMultiplesCollections.Contract.Paused(&_BaliolaMultiplesCollections.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) Paused() (bool, error) {
	return _BaliolaMultiplesCollections.Contract.Paused(&_BaliolaMultiplesCollections.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.SupportsInterface(&_BaliolaMultiplesCollections.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BaliolaMultiplesCollections.Contract.SupportsInterface(&_BaliolaMultiplesCollections.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) TotalSupply(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "totalSupply", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.TotalSupply(&_BaliolaMultiplesCollections.CallOpts, id)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) TotalSupply(id *big.Int) (*big.Int, error) {
	return _BaliolaMultiplesCollections.Contract.TotalSupply(&_BaliolaMultiplesCollections.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _tokenId) view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCaller) Uri(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _BaliolaMultiplesCollections.contract.Call(opts, &out, "uri", _tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _tokenId) view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Uri(_tokenId *big.Int) (string, error) {
	return _BaliolaMultiplesCollections.Contract.Uri(&_BaliolaMultiplesCollections.CallOpts, _tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _tokenId) view returns(string)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsCallerSession) Uri(_tokenId *big.Int) (string, error) {
	return _BaliolaMultiplesCollections.Contract.Uri(&_BaliolaMultiplesCollections.CallOpts, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Burn(&_BaliolaMultiplesCollections.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Burn(&_BaliolaMultiplesCollections.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.BurnBatch(&_BaliolaMultiplesCollections.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.BurnBatch(&_BaliolaMultiplesCollections.TransactOpts, account, ids, values)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.GrantRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.GrantRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x94d008ef.
//
// Solidity: function mint(address account, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "mint", account, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x94d008ef.
//
// Solidity: function mint(address account, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Mint(account common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Mint(&_BaliolaMultiplesCollections.TransactOpts, account, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x94d008ef.
//
// Solidity: function mint(address account, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) Mint(account common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Mint(&_BaliolaMultiplesCollections.TransactOpts, account, amount, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x2da0504f.
//
// Solidity: function mintBatch(address to, uint256 countOfNFTs, uint256[] amounts, bytes data) returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) MintBatch(opts *bind.TransactOpts, to common.Address, countOfNFTs *big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "mintBatch", to, countOfNFTs, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x2da0504f.
//
// Solidity: function mintBatch(address to, uint256 countOfNFTs, uint256[] amounts, bytes data) returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) MintBatch(to common.Address, countOfNFTs *big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.MintBatch(&_BaliolaMultiplesCollections.TransactOpts, to, countOfNFTs, amounts, data)
}

// MintBatch is a paid mutator transaction binding the contract method 0x2da0504f.
//
// Solidity: function mintBatch(address to, uint256 countOfNFTs, uint256[] amounts, bytes data) returns(uint256[])
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) MintBatch(to common.Address, countOfNFTs *big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.MintBatch(&_BaliolaMultiplesCollections.TransactOpts, to, countOfNFTs, amounts, data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Pause() (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Pause(&_BaliolaMultiplesCollections.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) Pause() (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Pause(&_BaliolaMultiplesCollections.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.RenounceRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.RenounceRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.RevokeRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.RevokeRole(&_BaliolaMultiplesCollections.TransactOpts, role, account)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SafeBatchTransferFrom(&_BaliolaMultiplesCollections.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SafeBatchTransferFrom(&_BaliolaMultiplesCollections.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SafeTransferFrom(&_BaliolaMultiplesCollections.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SafeTransferFrom(&_BaliolaMultiplesCollections.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SetApprovalForAll(&_BaliolaMultiplesCollections.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SetApprovalForAll(&_BaliolaMultiplesCollections.TransactOpts, operator, approved)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) SetURI(opts *bind.TransactOpts, newuri string) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "setURI", newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) SetURI(newuri string) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SetURI(&_BaliolaMultiplesCollections.TransactOpts, newuri)
}

// SetURI is a paid mutator transaction binding the contract method 0x02fe5305.
//
// Solidity: function setURI(string newuri) returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) SetURI(newuri string) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.SetURI(&_BaliolaMultiplesCollections.TransactOpts, newuri)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsSession) Unpause() (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Unpause(&_BaliolaMultiplesCollections.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsTransactorSession) Unpause() (*types.Transaction, error) {
	return _BaliolaMultiplesCollections.Contract.Unpause(&_BaliolaMultiplesCollections.TransactOpts)
}

// BaliolaMultiplesCollectionsApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsApprovalForAllIterator struct {
	Event *BaliolaMultiplesCollectionsApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsApprovalForAll represents a ApprovalForAll event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BaliolaMultiplesCollectionsApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsApprovalForAllIterator{contract: _BaliolaMultiplesCollections.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsApprovalForAll)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseApprovalForAll(log types.Log) (*BaliolaMultiplesCollectionsApprovalForAll, error) {
	event := new(BaliolaMultiplesCollectionsApprovalForAll)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsMintedIdIterator is returned from FilterMintedId and is used to iterate over the raw logs and unpacked data for MintedId events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsMintedIdIterator struct {
	Event *BaliolaMultiplesCollectionsMintedId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsMintedIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsMintedId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsMintedId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsMintedIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsMintedIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsMintedId represents a MintedId event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsMintedId struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMintedId is a free log retrieval operation binding the contract event 0x79a6e1720f9dc2a3b49a4efa844f8bc70e9bc606b1aedb697c09e87fc41cedac.
//
// Solidity: event MintedId(uint256 id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterMintedId(opts *bind.FilterOpts) (*BaliolaMultiplesCollectionsMintedIdIterator, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "MintedId")
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsMintedIdIterator{contract: _BaliolaMultiplesCollections.contract, event: "MintedId", logs: logs, sub: sub}, nil
}

// WatchMintedId is a free log subscription operation binding the contract event 0x79a6e1720f9dc2a3b49a4efa844f8bc70e9bc606b1aedb697c09e87fc41cedac.
//
// Solidity: event MintedId(uint256 id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchMintedId(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsMintedId) (event.Subscription, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "MintedId")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsMintedId)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "MintedId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintedId is a log parse operation binding the contract event 0x79a6e1720f9dc2a3b49a4efa844f8bc70e9bc606b1aedb697c09e87fc41cedac.
//
// Solidity: event MintedId(uint256 id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseMintedId(log types.Log) (*BaliolaMultiplesCollectionsMintedId, error) {
	event := new(BaliolaMultiplesCollectionsMintedId)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "MintedId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsPausedIterator struct {
	Event *BaliolaMultiplesCollectionsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsPaused represents a Paused event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterPaused(opts *bind.FilterOpts) (*BaliolaMultiplesCollectionsPausedIterator, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsPausedIterator{contract: _BaliolaMultiplesCollections.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsPaused) (event.Subscription, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsPaused)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParsePaused(log types.Log) (*BaliolaMultiplesCollectionsPaused, error) {
	event := new(BaliolaMultiplesCollectionsPaused)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleAdminChangedIterator struct {
	Event *BaliolaMultiplesCollectionsRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsRoleAdminChanged represents a RoleAdminChanged event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BaliolaMultiplesCollectionsRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsRoleAdminChangedIterator{contract: _BaliolaMultiplesCollections.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsRoleAdminChanged)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseRoleAdminChanged(log types.Log) (*BaliolaMultiplesCollectionsRoleAdminChanged, error) {
	event := new(BaliolaMultiplesCollectionsRoleAdminChanged)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleGrantedIterator struct {
	Event *BaliolaMultiplesCollectionsRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsRoleGranted represents a RoleGranted event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BaliolaMultiplesCollectionsRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsRoleGrantedIterator{contract: _BaliolaMultiplesCollections.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsRoleGranted)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseRoleGranted(log types.Log) (*BaliolaMultiplesCollectionsRoleGranted, error) {
	event := new(BaliolaMultiplesCollectionsRoleGranted)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleRevokedIterator struct {
	Event *BaliolaMultiplesCollectionsRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsRoleRevoked represents a RoleRevoked event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BaliolaMultiplesCollectionsRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsRoleRevokedIterator{contract: _BaliolaMultiplesCollections.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsRoleRevoked)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseRoleRevoked(log types.Log) (*BaliolaMultiplesCollectionsRoleRevoked, error) {
	event := new(BaliolaMultiplesCollectionsRoleRevoked)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsTransferBatchIterator struct {
	Event *BaliolaMultiplesCollectionsTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsTransferBatch represents a TransferBatch event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaliolaMultiplesCollectionsTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsTransferBatchIterator{contract: _BaliolaMultiplesCollections.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsTransferBatch)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseTransferBatch(log types.Log) (*BaliolaMultiplesCollectionsTransferBatch, error) {
	event := new(BaliolaMultiplesCollectionsTransferBatch)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsTransferSingleIterator struct {
	Event *BaliolaMultiplesCollectionsTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsTransferSingle represents a TransferSingle event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaliolaMultiplesCollectionsTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsTransferSingleIterator{contract: _BaliolaMultiplesCollections.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsTransferSingle)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseTransferSingle(log types.Log) (*BaliolaMultiplesCollectionsTransferSingle, error) {
	event := new(BaliolaMultiplesCollectionsTransferSingle)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsURIIterator struct {
	Event *BaliolaMultiplesCollectionsURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsURI represents a URI event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BaliolaMultiplesCollectionsURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsURIIterator{contract: _BaliolaMultiplesCollections.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsURI)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseURI(log types.Log) (*BaliolaMultiplesCollectionsURI, error) {
	event := new(BaliolaMultiplesCollectionsURI)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaliolaMultiplesCollectionsUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsUnpausedIterator struct {
	Event *BaliolaMultiplesCollectionsUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaliolaMultiplesCollectionsUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaliolaMultiplesCollectionsUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaliolaMultiplesCollectionsUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaliolaMultiplesCollectionsUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaliolaMultiplesCollectionsUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaliolaMultiplesCollectionsUnpaused represents a Unpaused event raised by the BaliolaMultiplesCollections contract.
type BaliolaMultiplesCollectionsUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BaliolaMultiplesCollectionsUnpausedIterator, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BaliolaMultiplesCollectionsUnpausedIterator{contract: _BaliolaMultiplesCollections.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BaliolaMultiplesCollectionsUnpaused) (event.Subscription, error) {

	logs, sub, err := _BaliolaMultiplesCollections.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaliolaMultiplesCollectionsUnpaused)
				if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_BaliolaMultiplesCollections *BaliolaMultiplesCollectionsFilterer) ParseUnpaused(log types.Log) (*BaliolaMultiplesCollectionsUnpaused, error) {
	event := new(BaliolaMultiplesCollectionsUnpaused)
	if err := _BaliolaMultiplesCollections.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
